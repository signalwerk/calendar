{"version":3,"sources":["lib/fieldParsers.js","lib/Parser.js","lib/icsExporter.js","App.js","serviceWorker.js","index.js"],"names":["MonthNameDE","MonthNameEN","MonthNameDef","join","TimeDef","testDate","RegExp","DayDef","testTime","testTimeRange","testNotes","testLocation","testUrl","isNumeric","num","isNaN","parseIfIsDate","ifElse","compose","test","prop","item","txt","parsed","exec","day","parseInt","month","year","forEach","def","index","replace","type","date","from","parseDate","body","parseIfIsTime","hour","minute","parseTime","parseIfIsTimeRange","to","parseTimeRange","parseIfIsNotes","notes","trim","parseIfIsLocation","location","parseIfIsUrl","url","parseTitle","title","typeUndefCb","entry","cb","equals","Parser","this","events","defaults","parsedEntry","line","out","mergeDeepLeft","prefix","pick","push","parseLine","curry","s","a","t","i","e","length","c","charAt","splitter","map","splitByComma","addType","value","data","parseDateTime","find","propEq","str","content","fm","err","console","log","attributes","filter","x","isEmpty","split","nameSpace","icsExporter","properties","moment","Property","name","uuidv5","JSON","stringify","toDate","parameters","TZID","diff","add","format","VALUE","Component","icsEvent","components","toString","demoFrontmatter","demoContent","App","useState","setContent","useFrontmatter","setUseFrontmatter","frontmatter","setFrontmatter","parser","parse","className","onClick","preventDefault","ics","blob","Blob","saveAs","checked","onChange","target","event","role","aria-label","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d03705c7.chunk.js","sourcesContent":["import { ifElse, compose, test, prop } from \"ramda\";\n\n// 01.01.1900 and 31.12.2099\n// https://stackoverflow.com/questions/12472976/regex-validate-european-date-format-with-multiple-separators\nconst DayDef = \"(3[01]|[12][0-9]|0[1-9]|[1-9])\";\nconst MonthNumberDef = \"1[012]|0\\\\d|\\\\d\";\n\nconst MonthNameDE = [\n  \"Januar|Jan.?\",\n  \"Februar|Febr.?|Feb.?\",\n  \"März|Mär.?|Marz|Mrz.?\",\n  \"April|Apr.?\",\n  \"Mai.?\",\n  \"Juni|Jun.?\",\n  \"Juli|Jul.?\",\n  \"August|Aug.?\",\n  \"September|Sept.?|Sep.?\",\n  \"Oktober|Okt.?\",\n  \"November|Nov.?\",\n  \"Dezember|Dez.?\"\n];\n\nconst MonthNameEN = [\n  \"January|Jan.?\",\n  \"February|Feb.?\",\n  \"March|Mar.?\",\n  \"April|Apr.?\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August|Aug.?\",\n  \"September|Sep.?\",\n  \"October|Oct.?\",\n  \"November|Nov.?\",\n  \"December|Dec.?\"\n];\n\nconst MonthNameDef = [...MonthNameDE, ...MonthNameEN].join(\"|\");\nconst MonthDef = \"(\" + MonthNumberDef + \"|\" + MonthNameDef + \")\";\nconst DateDef = DayDef + \"[. ]+\" + MonthDef + \"[. ]+(19\\\\d\\\\d|20\\\\d\\\\d|\\\\d\\\\d)\";\n\n// h\nconst hourDef = \"([ ]*(h|uhr))?\";\n\n// 00:01 - 23:59 or 00.01 - 23.59\nconst TimeDef = \"([01]\\\\d|2[0-3])[.:]?([0-5]\\\\d)?\" + hourDef;\n\n// to\nconst toDef = \"[ ]*([-–]|to|bis)[ ]*\";\n\nconst testDate = RegExp(\"^\" + DateDef + \"$\", \"i\");\nconst testTime = RegExp(\"^\" + TimeDef + \"$\", \"i\");\nconst testTimeRange = RegExp(\"^\" + TimeDef + toDef + TimeDef + \"$\", \"i\");\n\n// notes\nconst testNotes = /^(✏️|Notes|Note)[:]?[ ]?(.*)/i;\nconst testLocation = /^(📍|place|location|ort|where|wo)[:]?[ ]?(.*)/i;\n\nconst testUrl = /^(http|www)(.*)/;\n\nconst isNumeric = num => {\n  return !isNaN(num);\n};\n\nconst parseDate = txt => {\n  let parsed = testDate.exec(txt);\n\n  let day = parseInt(parsed[1]);\n  let month = parsed[2];\n  let year = parseInt(parsed[3]);\n\n  // if the year is just in two digits assume we are speaking about 20??\n  if (year < 1900) {\n    year = year + 2000;\n  }\n\n  // parse names of month to month\n  if (!isNumeric(month)) {\n    MonthNameDE.forEach((def, index) => {\n      month = month.replace(RegExp(def, \"i\"), index + 1);\n    });\n  }\n  if (!isNumeric(month)) {\n    MonthNameEN.forEach((def, index) => {\n      month = month.replace(RegExp(def, \"i\"), index + 1);\n    });\n  }\n\n  month = parseInt(month);\n\n  return {\n    type: \"date\",\n    date: {\n      from: {\n        day: day,\n        month: month,\n        year: year\n      }\n    }\n  };\n};\n\nconst parseNotes = txt => {\n  let parsed = testNotes.exec(txt);\n  return {\n    type: \"notes\",\n    notes: parsed[2].trim()\n  };\n};\n\nconst parseLocation = txt => {\n  let parsed = testLocation.exec(txt);\n  return {\n    type: \"location\",\n    location: parsed[2].trim()\n  };\n};\n\nconst parseUrl = txt => {\n  let parsed = testUrl.exec(txt);\n  return {\n    type: \"url\",\n    url: parsed[0].trim()\n  };\n};\n\nconst parseTime = txt => {\n  let parsed = testTime.exec(txt);\n  return {\n    type: \"time\",\n    date: {\n      from: {\n        hour: parseInt(parsed[1]),\n        minute: parseInt(parsed[2])\n      }\n    }\n  };\n};\n\nconst parseTimeRange = txt => {\n  let parsed = testTimeRange.exec(txt);\n  return {\n    type: \"time\",\n    date: {\n      from: {\n        hour: parseInt(parsed[1]),\n        minute: parseInt(parsed[2])\n      },\n      to: {\n        hour: parseInt(parsed[6]),\n        minute: parseInt(parsed[7])\n      }\n    }\n  };\n};\n\nexport const parseIfIsDate = ifElse(\n  compose(\n    test(testDate),\n    prop(\"body\")\n  ),\n  item => parseDate(item.body),\n  item => item\n);\n\nexport const parseIfIsTime = ifElse(\n  compose(\n    test(testTime),\n    prop(\"body\")\n  ),\n  item => parseTime(item.body),\n  item => item\n);\n\nexport const parseIfIsTimeRange = ifElse(\n  compose(\n    test(testTimeRange),\n    prop(\"body\")\n  ),\n  item => parseTimeRange(item.body),\n  item => item\n);\n\nexport const parseIfIsNotes = ifElse(\n  compose(\n    test(testNotes),\n    prop(\"body\")\n  ),\n  item => parseNotes(item.body),\n  item => item\n);\n\nexport const parseIfIsLocation = ifElse(\n  compose(\n    test(testLocation),\n    prop(\"body\")\n  ),\n  item => parseLocation(item.body),\n  item => item\n);\n\nexport const parseIfIsUrl = ifElse(\n  compose(\n    test(testUrl),\n    prop(\"body\")\n  ),\n  item => parseUrl(item.body),\n  item => item\n);\n\nexport const parseTitle = item => ({\n  type: \"title\",\n  title: { body: item.body.trim() },\n  body: item.body.trim()\n});\n","import fm from \"front-matter\";\nimport {\n  ifElse,\n  compose,\n  filter,\n  map,\n  trim,\n  isEmpty,\n  split,\n  equals,\n  prop,\n  propEq,\n  mergeDeepLeft,\n  find,\n  pick,\n  curry\n} from \"ramda\";\n\nimport {\n  parseIfIsDate,\n  parseIfIsTime,\n  parseIfIsTimeRange,\n  parseIfIsNotes,\n  parseIfIsUrl,\n  parseIfIsLocation,\n  parseTitle\n} from \"./fieldParsers\";\n\nconst typeUndefCb = (entry, cb) =>\n  ifElse(\n    compose(\n      equals(\"unknown\"),\n      prop(\"type\")\n    ),\n    item => cb(item),\n    item => item\n  )(entry);\n\nclass Parser {\n  constructor() {\n    this.events = [];\n  }\n\n  entry(entry, defaults) {\n    let parsedEntry = this.line(entry);\n    let out = mergeDeepLeft(parsedEntry, defaults);\n\n    out.date.to = mergeDeepLeft(out.date.to, out.date.from);\n\n    if (out.title.prefix && out.title.body) {\n      out.title = [out.title.prefix, out.title.body].join(\n        out.title.join || \" – \"\n      );\n    }\n\n    if (out.title.prefix && !out.title.body) {\n      out.title = out.title.prefix;\n    }\n\n    if (!out.title.prefix && (out.title.body || out.title.body === \"\")) {\n      out.title = out.title.body;\n    }\n\n    if (parsedEntry.notes && defaults.notes) {\n      out.notes = defaults.notes + \"\\n\" + parsedEntry.notes;\n    }\n\n    out = pick([\"date\", \"title\", \"notes\", \"location\", \"url\"], out);\n\n    this.events.push(out);\n    return out;\n  }\n\n  line(line) {\n    let out = line;\n\n    out = this.parseLine(out);\n    return out;\n  }\n\n  parseDateTime(item) {\n    // parse array\n    return compose(\n      curry(typeUndefCb(parseIfIsDate)),\n      curry(typeUndefCb(parseIfIsTime)),\n      curry(typeUndefCb(parseIfIsTimeRange)),\n      curry(typeUndefCb(parseIfIsNotes)),\n      curry(typeUndefCb(parseIfIsUrl)),\n      curry(typeUndefCb(parseIfIsLocation)),\n      curry(typeUndefCb(parseTitle))\n    )(item);\n  }\n\n  // see https://rosettacode.org/wiki/Tokenize_a_string_with_escaping#JavaScript\n  splitByComma(s) {\n    let esc = \"\\\\\";\n    let sep = \",\";\n    for (var a = [], t = \"\", i = 0, e = s.length; i < e; i += 1) {\n      var c = s.charAt(i);\n      if (c === esc) {\n        t += s.charAt(++i);\n      } else if (c !== sep) {\n        t += c;\n      } else {\n        a.push(t);\n        t = \"\";\n      }\n    }\n    a.push(t);\n    return a;\n  }\n\n  parseLine(line) {\n    // split up the line into components\n    // 30.4.2018, 18–20Uhr, Frühlingsferien => ['30.4.2018', '18–20Uhr', 'Frühlingsferien']\n    const splitter = compose(\n      map(trim),\n      this.splitByComma\n    );\n\n    // convert the string array to a object array\n    const addType = map(value => ({ type: \"unknown\", body: value }));\n\n    // build array\n    let data = compose(\n      addType,\n      splitter\n    )(line);\n\n    // parse array\n    data = map(this.parseDateTime, data);\n\n    let out = data;\n\n    out = mergeDeepLeft(\n      find(propEq(\"type\", \"time\"))(data) || {},\n      find(propEq(\"type\", \"date\"))(data) || {}\n    );\n\n    out = mergeDeepLeft(out, find(propEq(\"type\", \"notes\"))(data) || {});\n    out = mergeDeepLeft(out, find(propEq(\"type\", \"location\"))(data) || {});\n    out = mergeDeepLeft(out, find(propEq(\"type\", \"url\"))(data) || {});\n    out = mergeDeepLeft(out, find(propEq(\"type\", \"title\"))(data) || {});\n\n    return out;\n  }\n\n  parse(str) {\n    // parse frontmatter\n    var content = { body: str };\n\n    if (fm.test(str)) {\n      try {\n        // try to parse the frontmatter\n        content = fm(str);\n      } catch (err) {\n        // remove broken frontmatter\n        content.body = content.body.replace(/^---(.|[\\r\\n])*---/, \"\");\n        console.log(\"illegal frontmatter header\");\n      }\n    }\n\n    let _def = {\n      date: \"1.1.1970\",\n      title: \"event\",\n      url: \"\",\n      notes: \"\"\n    };\n\n    let defaults = mergeDeepLeft(content.attributes, _def);\n\n    if (defaults.date) {\n      defaults.date = this.parseDateTime({\n        type: \"unknown\",\n        body: defaults.date\n      }).date;\n    }\n\n    const splitter = compose(\n      filter(x => !isEmpty(x)),\n      map(trim),\n      split(/[\\r\\n]+/g /* here comes the line */)\n    );\n\n    let runLine = item => {\n      this.entry(item, defaults);\n    };\n\n    map(runLine, splitter(content.body));\n  }\n}\n\nexport default Parser;\n","import moment from \"moment\";\nimport { Property, Component } from \"immutable-ics\";\nimport uuidv5 from \"uuid/v5\";\n\n// const nameSpace = \"exporter...0.0.1\".split(/(?=.)/g);\nconst nameSpace = [\n  \"e\",\n  \"x\",\n  \"p\",\n  \"o\",\n  \"r\",\n  \"t\",\n  \"e\",\n  \"r\",\n  \".\",\n  \".\",\n  \".\",\n  \"0\",\n  \".\",\n  \"0\",\n  \".\",\n  \"1\"\n];\n\nclass icsExporter {\n  constructor(events) {\n    this.events = events || [];\n  }\n\n  // generate the icsEvent\n  icsEvent(data) {\n    let {\n      date: { from },\n      date: { to },\n      title,\n      url,\n      location,\n      notes\n    } = data;\n    var properties = [];\n\n    // zero based month in js\n    if (from.month) {\n      from.month = from.month - 1;\n    }\n\n    // zero based month in js\n    if (to.month) {\n      to.month = to.month - 1;\n    }\n\n    from = {\n      minute: from.minute || 0,\n      hour: from.hour || 0,\n      day: from.day || 1,\n      month: from.month || 0,\n      year: from.year || 1900\n    };\n\n    to = {\n      minute: to.minute || from.minute,\n      hour: to.hour || from.hour,\n      day: to.day || from.day,\n      month: to.month || from.month,\n      year: to.year || from.year\n    };\n\n    from = new moment(from);\n    to = new moment(to);\n\n    properties.push(\n      new Property({\n        name: \"UID\",\n        value: uuidv5(JSON.stringify(data), nameSpace)\n      }),\n\n      // the value is generated from the\n      // start-date to keep it stable over multiple\n      // runs.\n      // const now = new moment();\n      // value: now.toDate(),\n      new Property({\n        name: \"DTSTAMP\",\n        value: from.toDate(), // keep stable\n        parameters: {\n          // VALUE: 'DATE-TIME',\n          TZID: \"Europe/Zurich\"\n        }\n      }),\n      new Property({\n        name: \"SUMMARY\",\n        value: title || \"no Title\"\n      })\n    );\n\n    if (from.diff(to) === 0) {\n      // whole day handling\n      to.add(1, \"d\");\n      properties.push(\n        new Property({\n          name: \"DTSTART\",\n          value: from.format(\"YYYYMMDD\"),\n          parameters: {\n            VALUE: \"DATE\"\n          }\n        }),\n        new Property({\n          name: \"DTEND\",\n          value: to.format(\"YYYYMMDD\"),\n          parameters: {\n            VALUE: \"DATE\"\n          }\n        })\n      );\n    } else {\n      // handling with time\n      properties.push(\n        new Property({\n          name: \"DTSTART\",\n          value: from.toDate(),\n          parameters: {\n            // VALUE: 'DATE-TIME',\n            TZID: \"Europe/Zurich\"\n          }\n        }),\n        new Property({\n          name: \"DTEND\",\n          value: to.toDate(),\n          parameters: {\n            // VALUE: 'DATE-TIME',\n            TZID: \"Europe/Zurich\"\n          }\n        })\n      );\n    }\n\n    if (url) {\n      properties.push(\n        new Property({\n          name: \"URL\",\n          value: url,\n          parameters: {\n            VALUE: \"URI\"\n          }\n        })\n      );\n    }\n\n    if (location) {\n      properties.push(\n        new Property({\n          name: \"LOCATION\",\n          value: location\n        })\n      );\n    }\n\n    if (notes) {\n      properties.push(\n        new Property({\n          name: \"DESCRIPTION\",\n          value: notes\n        })\n      );\n    }\n\n    var event = new Component({\n      name: \"VEVENT\",\n      properties\n    });\n\n    return event;\n  }\n\n  // generate the ics\n  ics() {\n    var events = [];\n\n    this.events.forEach(value => {\n      events.push(this.icsEvent(value));\n    });\n\n    const calendar = new Component({\n      name: \"VCALENDAR\",\n      components: events,\n      properties: [\n        new Property({\n          name: \"VERSION\",\n          value: 2\n        }),\n        new Property({\n          name: \"PRODID\",\n          value: \"signalwerk-generator\"\n        })\n      ]\n    });\n\n    let out = calendar.toString();\n    return out;\n  }\n}\n\nexport default icsExporter;\n","import React, { useState } from \"react\";\n\nimport Parser from \"./lib/Parser\";\nimport icsExporter from \"./lib/icsExporter\";\nimport { saveAs } from \"file-saver\";\n\nimport \"./App.css\";\n\nconst demoFrontmatter = `title:\n  prefix: \"Meetup\"\ndate: 18:00–22:00\nurl: https://test.com\nlocation: Switzerland\nnotes: bring beer.\n`;\nconst demoContent = `22.2.2026, Simple Event\n23.2.2026, 16:00–17:00, Time Event\n24.2.2026, Event with notes, notes: it's nice\n25.2.2026, Event with location, location: Zurich\n26.2.2026, Event with link, http://test.ch`;\n\nfunction App() {\n  const [content, setContent] = useState(demoContent);\n  const [useFrontmatter, setUseFrontmatter] = useState(false);\n  const [frontmatter, setFrontmatter] = useState(demoFrontmatter);\n  let parser = new Parser();\n\n  parser.parse(\n    useFrontmatter ? `---\\n${frontmatter}\\n---\\n${content}` : content\n  );\n\n  // // Similar to componentDidMount and componentDidUpdate:\n  //  useEffect(() => {\n  //    // Update the document title using the browser API\n  //    document.title = `You clicked ${count} times`;\n  //  });\n  //\n  function handleClick(e) {\n    e.preventDefault();\n\n    let ics = new icsExporter(parser.events);\n    let out = ics.ics();\n\n    var blob = new Blob([out], { type: \"text/calendar;charset=utf-8\" });\n    saveAs(blob, \"events.ics\");\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Events</h1>\n      </header>\n      <div className=\"App-content\">\n        {parser.events && parser.events.length > 0 && (\n          <button className=\"App-save\" onClick={handleClick}>\n            save .ics-file\n          </button>\n        )}\n\n        <div className=\"App-frontmatter\">\n          <label>\n            Use Global attributes:\n            <input\n              name=\"use frontmatter\"\n              type=\"checkbox\"\n              checked={useFrontmatter}\n              onChange={e => setUseFrontmatter(e.target.checked)}\n            />\n          </label>\n          <br />\n          <br />\n        </div>\n\n        {useFrontmatter && (\n          <div className=\"App-frontmatter\">\n            <textarea\n              className=\"App-input App-input--frontmatter\"\n              value={frontmatter}\n              onChange={e => setFrontmatter(e.target.value)}\n            />\n          </div>\n        )}\n        <textarea\n          className=\"App-input\"\n          value={content}\n          onChange={e => setContent(e.target.value)}\n        />\n        {parser.events &&\n          parser.events.length > 0 &&\n          parser.events.map(event => {\n            return (\n              <div className=\"App-event\">\n                <h3>{event.title}</h3>\n                <p>\n                  {\"📅 \"}\n                  {event.date.from.day}{\".\"}\n                  {event.date.from.month}{\".\"}\n                  {event.date.from.year}\n                  {event.date.from.hour && (\n                    <span>\n                      {\" \"}\n                      {event.date.from.hour}\n                      {\":\"}\n                      {event.date.from.minute ? event.date.from.minute : \"00\"}\n                    </span>\n                  )}\n                  {\" – \"}\n                  {event.date.to.day}{\".\"}\n                  {event.date.to.month}{\".\"}\n                  {event.date.to.year}\n                  {event.date.to.hour && (\n                    <span>\n                      {\" \"}\n                      {event.date.to.hour}\n                      {\":\"}\n                      {event.date.to.minute ? event.date.to.minute : \"00\"}\n                    </span>\n                  )}\n                </p>\n                {event.notes && (\n                  <p>\n                    <span role=\"img\" aria-label=\"notes\">\n                      ✏️\n                    </span>{\" \"}\n                    {event.notes}\n                  </p>\n                )}\n                {event.location && (\n                  <p>\n                    <span role=\"img\" aria-label=\"location\">\n                      📍\n                    </span>{\" \"}\n                    {event.location}\n                  </p>\n                )}\n                {event.url && (\n                  <p>\n                    <span role=\"img\" aria-label=\"url\">\n                      🔗\n                    </span>{\" \"}\n                    {event.url}\n                  </p>\n                )}\n\n                <details>\n                  <summary>Debug-Infos</summary>\n                  <pre>{JSON.stringify(event, null, 2)}</pre>\n                </details>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}