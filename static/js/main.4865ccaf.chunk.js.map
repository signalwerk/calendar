{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Parser","cDeck","icsExporter","Exporter","ics","App","useState","content","setContent","useFrontmatter","setUseFrontmatter","frontmatter","setFrontmatter","parser","parse","className","events","length","onClick","e","preventDefault","out","blob","Blob","type","saveAs","name","checked","onChange","target","value","map","event","title","date","from","day","month","year","hour","minute","to","notes","role","aria-label","location","url","JSON","stringify","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4iBASEA,G,OAEEC,IAFFD,QACiBE,EACfD,IADFE,SAAYC,IAqJCC,MArIf,WACE,MAA8BC,mBAPf,iNAOf,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4CF,oBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAAsCJ,mBAhBnB,0HAgBnB,mBAAOK,EAAP,KAAoBC,EAApB,KACIC,EAAS,IAAIb,EAgBjB,OAdAa,EAAOC,MACLL,EAAc,eAAWE,EAAX,kBAAgCJ,GAAYA,GAc1D,yBAAKQ,UAAU,OACb,4BAAQA,UAAU,cAChB,uCAEF,yBAAKA,UAAU,eACZF,EAAOG,QAAUH,EAAOG,OAAOC,OAAS,GACvC,4BAAQF,UAAU,WAAWG,QAjBrC,SAAqBC,GACnBA,EAAEC,iBAEF,IACIC,EADM,IAAInB,EAAYW,EAAOG,QACnBZ,MAEVkB,EAAO,IAAIC,KAAK,CAACF,GAAM,CAAEG,KAAM,gCACnCC,iBAAOH,EAAM,gBAUP,kBAKF,yBAAKP,UAAU,mBACb,wDAEE,2BACEW,KAAK,kBACLF,KAAK,WACLG,QAASlB,EACTmB,SAAU,SAAAT,GAAC,OAAIT,EAAkBS,EAAEU,OAAOF,aAG9C,6BACA,8BAGDlB,GACC,yBAAKM,UAAU,mBACb,8BACEA,UAAU,mCACVe,MAAOnB,EACPiB,SAAU,SAAAT,GAAC,OAAIP,EAAeO,EAAEU,OAAOC,WAI7C,8BACEf,UAAU,YACVe,MAAOvB,EACPqB,SAAU,SAAAT,GAAC,OAAIX,EAAWW,EAAEU,OAAOC,UAEpCjB,EAAOG,QACNH,EAAOG,OAAOC,OAAS,GACvBJ,EAAOG,OAAOe,KAAI,SAAAC,GAChB,OACE,yBAAKjB,UAAU,aACb,4BAAKiB,EAAMC,OACX,2BACG,gBACAD,EAAME,KAAKC,KAAKC,IAChB,IACAJ,EAAME,KAAKC,KAAKE,MAChB,IACAL,EAAME,KAAKC,KAAKG,KAChBN,EAAME,KAAKC,KAAKI,MACf,8BACG,IACAP,EAAME,KAAKC,KAAKI,KAChB,IACAP,EAAME,KAAKC,KAAKK,OAASR,EAAME,KAAKC,KAAKK,OAAS,MAGtD,qBACAR,EAAME,KAAKO,GAAGL,IACd,IACAJ,EAAME,KAAKO,GAAGJ,MACd,IACAL,EAAME,KAAKO,GAAGH,KACdN,EAAME,KAAKO,GAAGF,MACb,8BACG,IACAP,EAAME,KAAKO,GAAGF,KACd,IACAP,EAAME,KAAKO,GAAGD,OAASR,EAAME,KAAKO,GAAGD,OAAS,OAIpDR,EAAMU,OACL,2BACE,0BAAMC,KAAK,MAAMC,aAAW,SAA5B,gBAEQ,IACPZ,EAAMU,OAGVV,EAAMa,UACL,2BACE,0BAAMF,KAAK,MAAMC,aAAW,YAA5B,gBAEQ,IACPZ,EAAMa,UAGVb,EAAMc,KACL,2BACE,0BAAMH,KAAK,MAAMC,aAAW,OAA5B,gBAEQ,IACPZ,EAAMc,KAIX,iCACE,gDACA,6BAAMC,KAAKC,UAAUhB,EAAO,KAAM,YCzIhCiB,QACW,cAA7BC,OAAOL,SAASM,UAEe,UAA7BD,OAAOL,SAASM,UAEhBD,OAAOL,SAASM,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4865ccaf.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport cDeck from \"calendar-deck\";\n\nimport { saveAs } from \"file-saver\";\n\nimport \"./App.css\";\n\nconst {\n  Parser,\n  Exporter: { ics: icsExporter }\n} = cDeck;\n\nconst demoFrontmatter = `title:\n  prefix: \"Meetup\"\ndate: 18:00‚Äì22:00\nurl: https://test.com\nlocation: Switzerland\nnotes: bring beer.\n`;\nconst demoContent = `22.2.2026, Simple Event\n23.2.2026, 16:00‚Äì17:00, Time Event\n24.2.2026, Event with notes, notes: it's nice\n25.2.2026, Event with location, location: Zurich\n26.2.2026, Event with link, http://test.ch`;\n\nfunction App() {\n  const [content, setContent] = useState(demoContent);\n  const [useFrontmatter, setUseFrontmatter] = useState(false);\n  const [frontmatter, setFrontmatter] = useState(demoFrontmatter);\n  let parser = new Parser();\n\n  parser.parse(\n    useFrontmatter ? `---\\n${frontmatter}\\n---\\n${content}` : content\n  );\n\n  function handleClick(e) {\n    e.preventDefault();\n\n    let ics = new icsExporter(parser.events);\n    let out = ics.ics();\n\n    var blob = new Blob([out], { type: \"text/calendar;charset=utf-8\" });\n    saveAs(blob, \"events.ics\");\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Events</h1>\n      </header>\n      <div className=\"App-content\">\n        {parser.events && parser.events.length > 0 && (\n          <button className=\"App-save\" onClick={handleClick}>\n            save .ics-file\n          </button>\n        )}\n\n        <div className=\"App-frontmatter\">\n          <label>\n            Use Global attributes:\n            <input\n              name=\"use frontmatter\"\n              type=\"checkbox\"\n              checked={useFrontmatter}\n              onChange={e => setUseFrontmatter(e.target.checked)}\n            />\n          </label>\n          <br />\n          <br />\n        </div>\n\n        {useFrontmatter && (\n          <div className=\"App-frontmatter\">\n            <textarea\n              className=\"App-input App-input--frontmatter\"\n              value={frontmatter}\n              onChange={e => setFrontmatter(e.target.value)}\n            />\n          </div>\n        )}\n        <textarea\n          className=\"App-input\"\n          value={content}\n          onChange={e => setContent(e.target.value)}\n        />\n        {parser.events &&\n          parser.events.length > 0 &&\n          parser.events.map(event => {\n            return (\n              <div className=\"App-event\">\n                <h3>{event.title}</h3>\n                <p>\n                  {\"üìÖ \"}\n                  {event.date.from.day}\n                  {\".\"}\n                  {event.date.from.month}\n                  {\".\"}\n                  {event.date.from.year}\n                  {event.date.from.hour && (\n                    <span>\n                      {\" \"}\n                      {event.date.from.hour}\n                      {\":\"}\n                      {event.date.from.minute ? event.date.from.minute : \"00\"}\n                    </span>\n                  )}\n                  {\"‚ÄØ‚Äì‚ÄØ\"}\n                  {event.date.to.day}\n                  {\".\"}\n                  {event.date.to.month}\n                  {\".\"}\n                  {event.date.to.year}\n                  {event.date.to.hour && (\n                    <span>\n                      {\" \"}\n                      {event.date.to.hour}\n                      {\":\"}\n                      {event.date.to.minute ? event.date.to.minute : \"00\"}\n                    </span>\n                  )}\n                </p>\n                {event.notes && (\n                  <p>\n                    <span role=\"img\" aria-label=\"notes\">\n                      ‚úèÔ∏è\n                    </span>{\" \"}\n                    {event.notes}\n                  </p>\n                )}\n                {event.location && (\n                  <p>\n                    <span role=\"img\" aria-label=\"location\">\n                      üìç\n                    </span>{\" \"}\n                    {event.location}\n                  </p>\n                )}\n                {event.url && (\n                  <p>\n                    <span role=\"img\" aria-label=\"url\">\n                      üîó\n                    </span>{\" \"}\n                    {event.url}\n                  </p>\n                )}\n\n                <details>\n                  <summary>Debug-Infos</summary>\n                  <pre>{JSON.stringify(event, null, 2)}</pre>\n                </details>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}